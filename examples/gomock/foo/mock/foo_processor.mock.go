// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xosmig/placeholders/examples/gomock/foo (interfaces: FooProcessor)

// Package mock_foo is a generated GoMock package.
package mock_foo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	foo "github.com/xosmig/placeholders/examples/gomock/foo"
)

// MockFooProcessor is a mock of FooProcessor interface.
type MockFooProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockFooProcessorMockRecorder
}

// MockFooProcessorMockRecorder is the mock recorder for MockFooProcessor.
type MockFooProcessorMockRecorder struct {
	mock *MockFooProcessor
}

// NewMockFooProcessor creates a new mock instance.
func NewMockFooProcessor(ctrl *gomock.Controller) *MockFooProcessor {
	mock := &MockFooProcessor{ctrl: ctrl}
	mock.recorder = &MockFooProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFooProcessor) EXPECT() *MockFooProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockFooProcessor) Process(arg0 *foo.Foo) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockFooProcessorMockRecorder) Process(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockFooProcessor)(nil).Process), arg0)
}
